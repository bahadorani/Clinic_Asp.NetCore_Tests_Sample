// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Client.AcceptanceTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PatientFeature : object, Xunit.IClassFixture<PatientFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Patient.feature"
#line hidden
        
        public PatientFeature(PatientFeature.FixtureData fixtureData, Client_AcceptanceTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Patient", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Address"});
            table4.AddRow(new string[] {
                        "1",
                        "CenteralClinic",
                        "-----------"});
#line 4
 testRunner.Given("clinic info with below data", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Family",
                        "Tell",
                        "CenterId"});
            table5.AddRow(new string[] {
                        "2",
                        "Ali",
                        "Zamani",
                        "09132000000",
                        "1"});
            table5.AddRow(new string[] {
                        "3",
                        "Zahra",
                        "Omodi",
                        "09148000000",
                        "1"});
#line 7
 testRunner.And("Users infos with below data", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title"});
            table6.AddRow(new string[] {
                        "4",
                        "Neurologists"});
            table6.AddRow(new string[] {
                        "5",
                        "Nephrologist"});
#line 11
 testRunner.And("Experts of doctors with bellow data", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "IdentityNumber",
                        "Title",
                        "Tell",
                        "Address"});
            table7.AddRow(new string[] {
                        "4",
                        "123456789",
                        "Asia",
                        "09178200336",
                        "------"});
#line 15
 testRunner.And("Insurance info with below data", ((string)(null)), table7, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check installment count for each patient")]
        [Xunit.TraitAttribute("FeatureTitle", "Patient")]
        [Xunit.TraitAttribute("Description", "Check installment count for each patient")]
        public virtual void CheckInstallmentCountForEachPatient()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check installment count for each patient", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "IdentityCart",
                            "InsuranceId",
                            "Caption"});
                table8.AddRow(new string[] {
                            "1",
                            "2",
                            "1472583690",
                            "null",
                            "--------"});
#line 22
 testRunner.When("a patient that is not covered by health insurance with the below data goes to the" +
                        " clinic for treatment", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "ExpertId"});
                table9.AddRow(new string[] {
                            "1",
                            "3",
                            "5"});
#line 25
 testRunner.And("a doctor with the following profile is visiting the patients.", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "DoctorId",
                            "PatientId",
                            "Price",
                            "Caption",
                            "InstallmentCount",
                            "InstallmentPay",
                            "Date"});
                table10.AddRow(new string[] {
                            "6",
                            "3",
                            "2",
                            "1000000",
                            "--------",
                            "2",
                            "50000",
                            "2023-02-14 18:08:06"});
#line 28
 testRunner.And("the patient and the doctor have an appointment together and the patient will pay " +
                        "the treatment fee in installments with the below data", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "VisitId",
                            "Payment",
                            "Date"});
                table11.AddRow(new string[] {
                            "1",
                            "6",
                            "50000",
                            "2023-02-20 10:08:06"});
#line 31
 testRunner.When("the patient pay money of treatment according to visit info in bellow data", ((string)(null)), table11, "When ");
#line hidden
#line 34
 testRunner.Then("the result of installment that the patient \"2\" has not paid is \"1\" installment.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PatientFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PatientFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
